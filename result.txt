Vou adicionar um switch de tema no menu superior usando o next-themes que j√° est√° configurado no projeto.

=== Start File ===
components/theme-toggle.tsx
---
"use client";

import { Moon, Sun } from "lucide-react";
import { useTheme } from "next-themes";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";

export function ThemeToggle() {
  const { setTheme, theme } = useTheme();

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="outline" size="icon">
          <Sun className="h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
          <Moon className="absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
          <span className="sr-only">Alternar tema</span>
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end">
        <DropdownMenuItem onClick={() => setTheme("light")}>
          <Sun className="mr-2 h-4 w-4" />
          Claro
        </DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme("dark")}>
          <Moon className="mr-2 h-4 w-4" />
          Escuro
        </DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme("system")}>
          <span className="mr-2">üíª</span>
          Sistema
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
}
=== End File ===

=== Start File ===
components/main-nav.tsx
---
"use client";

import { Settings, Users, ListTodo } from "lucide-react";
import { Button } from "./ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
  DropdownMenuSeparator,
} from "./ui/dropdown-menu";
import { useState, useCallback } from "react";
import { ChildrenManagementDialog } from "./children-management-dialog";
import { TaskManagementDialog } from "./task-management-dialog";
import { ThemeToggle } from "./theme-toggle";

export function MainNav() {
  const [isChildrenDialogOpen, setIsChildrenDialogOpen] = useState(false);
  const [isTaskDialogOpen, setIsTaskDialogOpen] = useState(false);

  const handleChildrenDialogChange = useCallback((open: boolean) => {
    setIsChildrenDialogOpen(open);
  }, []);

  const handleTaskDialogChange = useCallback((open: boolean) => {
    setIsTaskDialogOpen(open);
  }, []);

  return (
    <div className="flex items-center gap-4">
      <ThemeToggle />
      
      <DropdownMenu>
        <DropdownMenuTrigger asChild>
          <Button variant="outline" size="icon">
            <Settings className="h-4 w-4" />
          </Button>
        </DropdownMenuTrigger>
        <DropdownMenuContent align="end">
          <DropdownMenuItem onClick={() => handleChildrenDialogChange(true)}>
            <Users className="mr-2 h-4 w-4" />
            Gerenciar Crian√ßas
          </DropdownMenuItem>
          <DropdownMenuSeparator />
          <DropdownMenuItem onClick={() => handleTaskDialogChange(true)}>
            <ListTodo className="mr-2 h-4 w-4" />
            Gerenciar Tarefas
          </DropdownMenuItem>
        </DropdownMenuContent>
      </DropdownMenu>

      <ChildrenManagementDialog
        open={isChildrenDialogOpen}
        onOpenChange={handleChildrenDialogChange}
      />

      <TaskManagementDialog
        open={isTaskDialogOpen}
        onOpenChange={handleTaskDialogChange}
      />
    </div>
  );
}
=== End File ===

=== Start File ===
app/layout.tsx
---
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";
import { ThemeProvider } from "@/components/theme-provider";
import { Toaster } from "@/components/ui/toaster";

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "Tarefas das Crian√ßas",
  description: "Controle de tarefas di√°rias para crian√ßas",
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="pt-BR" suppressHydrationWarning>
      <body className={`${inter.className} min-h-screen bg-background`}>
        <ThemeProvider
          attribute="class"
          defaultTheme="system"
          enableSystem
          disableTransitionOnChange
        >
          {children}
          <Toaster />
        </ThemeProvider>
      </body>
    </html>
  );
}
=== End File ===

=== Start File ===
components/theme-provider.tsx
---
"use client";

import * as React from "react";
import { ThemeProvider as NextThemesProvider } from "next-themes";
import { type ThemeProviderProps } from "next-themes/dist/types";

export function ThemeProvider({ children, ...props }: ThemeProviderProps) {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>;
}
=== End File ===

Principais altera√ß√µes:

1. Criado componente ThemeToggle com tr√™s op√ß√µes:
   - Tema Claro
   - Tema Escuro
   - Tema do Sistema

2. Adicionado bot√£o de altern√¢ncia de tema na barra superior
   - √çcone animado que alterna entre sol e lua
   - Menu dropdown com as op√ß√µes de tema
   - Feedback visual da sele√ß√£o atual

3. Configurado ThemeProvider no layout principal
   - Suporte a temas claro e escuro
   - Persist√™ncia da prefer√™ncia do usu√°rio
   - Transi√ß√µes suaves entre temas

4. Melhorias visuais:
   - Anima√ß√µes suaves na troca de temas
   - √çcones contextuais para cada op√ß√£o
   - Interface consistente com o design geral

Para testar:
1. Clique no bot√£o de tema (√≠cone sol/lua)
2. Experimente as tr√™s op√ß√µes:
   - Tema Claro
   - Tema Escuro
   - Sistema (usa a prefer√™ncia do sistema operacional)
3. Verifique se a prefer√™ncia √© mantida ap√≥s recarregar a p√°gina
4. Observe as transi√ß√µes suaves entre os temas

O switch de tema est√° totalmente integrado com o design da aplica√ß√£o e oferece uma experi√™ncia de usu√°rio fluida e intuitiva.